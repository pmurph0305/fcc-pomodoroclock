{"version":3,"sources":["AdjustableLength/AdjustableTimes.js","Button/Button.js","TimeDisplay/TimeDisplay.js","App.js","serviceWorker.js","index.js"],"names":["AdjustableTimes","_ref","idValue","value","idLabel","label","idButtonDown","idButtonUp","onDecrement","onIncrement","react_default","a","createElement","className","htmlFor","id","onClick","Button","buttonId","faIconName","TimeDisplay","timeMins","timeSecs","initialState","breakLength","sessionLength","timeLabel","timerIsRunning","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSessionDecrement","state","setState","onBreakDecrement","onSessionIncrement","onBreakIncrement","onStartStopClick","timerTimeout","setTimeout","onUpdateTimer","onResetClick","audioBeep","current","pause","currentTime","onTimerFinished","play","React","createRef","clearTimeout","src_AdjustableLength_AdjustableTimes","src_TimeDisplay_TimeDisplay","src_Button_Button","ref","src","process","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94d90768.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './AdjustableTimes.css'\r\n\r\nconst AdjustableTimes = ({idValue, value, idLabel, label, idButtonDown, idButtonUp, onDecrement, onIncrement}) => {\r\n\r\n  return(\r\n    <div className=\"adjustable-times-container\">\r\n      <label className=\"adjustable-times-label\" htmlFor={idButtonDown} id={idLabel}>{label}</label>\r\n      <div className=\"adjustable-times-buttons-container\">\r\n        <button className=\"adjustable-times-button\" id={idButtonUp} onClick={onIncrement}><i className=\"fa fa-arrow-up\"></i></button>\r\n        <p className=\"adjustable-times-value\" id={idValue}>{value}</p>\r\n        <button className=\"adjustable-times-button\" id={idButtonDown} onClick={onDecrement}><i className=\"fa fa-arrow-down\"></i></button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nAdjustableTimes.propTypes = {\r\n  idButtonDown: PropTypes.string,\r\n  idButtonUp: PropTypes.string,\r\n  idLabel: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onDecrement: PropTypes.func,\r\n  onIncrement: PropTypes.func,\r\n}\r\n\r\nexport default AdjustableTimes;","import React from 'react';\r\n\r\nimport './Button.css'\r\n\r\nconst Button = ({buttonId, label, onClick, faIconName}) => {\r\n\r\n  return (\r\n    <button className=\"pomo-button\" id={buttonId} onClick={onClick}>{label}<i className={\"fa \"+faIconName}></i></button>\r\n  )\r\n\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst TimeDisplay = ({timeMins, timeSecs}) => {\r\n  \r\n  const displayedTime = () => {\r\n    return (timeMins < 10 ? \"0\"+timeMins : timeMins) + \":\" + (timeSecs < 10 ? \"0\"+timeSecs : timeSecs);\r\n  }\r\n\r\n  return (\r\n    <p id=\"time-left\">\r\n      {displayedTime()}\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default TimeDisplay;","import React from 'react';\n\nimport AdjustableTimes from './AdjustableLength/AdjustableTimes'\nimport Button from './Button/Button'\nimport TimeDisplay from './TimeDisplay/TimeDisplay'\n\nimport './App.css';\n\nconst initialState = {\n  breakLength: 5,\n  sessionLength: 25,\n  timeLabel: \"Session\",\n  timeMins: 25,\n  timeSecs: 0,\n  timerIsRunning: false,\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.timerTimeout = null;\n    this.audioBeep = React.createRef();\n  }\n\n  onSessionDecrement = () => {\n    if (this.state.sessionLength > 1) {\n      this.setState({ sessionLength: this.state.sessionLength-1, timeMins: this.state.sessionLength-1})\n    }\n  }\n\n  onBreakDecrement = () => {\n    if (this.state.breakLength > 1) {\n      this.setState({ breakLength: this.state.breakLength-1})\n    }\n  }\n\n  onSessionIncrement = () => {\n    if (this.state.sessionLength < 60) {\n      this.setState({ sessionLength: this.state.sessionLength+1, timeMins: this.state.sessionLength+1})\n    }\n  }\n\n  onBreakIncrement = () => {\n    if (this.state.breakLength < 60) {\n      this.setState({ breakLength: this.state.breakLength+1})\n    }\n  }\n\n  onStartStopClick = () => {\n    if (this.state.timerIsRunning === false) {\n      this.setState({timerIsRunning: true});\n      this.timerTimeout = setTimeout(this.onUpdateTimer, 1000);\n    } else {\n      this.setState({timerIsRunning: false})\n    }\n  }\n\n\n\n  onResetClick = () => {\n    this.setState(initialState);\n    if (this.audioBeep.current) {\n        // User Story #28: The audio element with id of beep must stop playing \n  // and be rewound to the beginning when the element with the id of reset is clicked.\n      this.audioBeep.current.pause();\n      this.audioBeep.current.currentTime=0;\n    }\n  }\n  \n  onTimerFinished = () => {\n    if (this.audioBeep.current) {\n      this.audioBeep.current.play();\n    }\n    if(this.state.timeLabel === \"Session\") {\n      this.setState({timeLabel: \"Break\", timeSecs: 0, timeMins: this.state.breakLength}, () => {\n        this.timerTimeout = setTimeout(this.onUpdateTimer, 1000);\n      });\n    } else if (this.state.timeLabel === \"Break\") {\n      this.setState({timeLabel: \"Session\", timeSecs: 0, timeMins: this.state.sessionLength}, () => {\n        this.timerTimeout = setTimeout(this.onUpdateTimer, 1000);\n      });\n    }\n  }\n\n  onUpdateTimer = () => {\n    if (this.state.timerIsRunning) {\n      if (this.state.timeSecs === 0) {\n        if (this.state.timeMins > 0) {\n          this.setState({timeSecs: 59, timeMins: this.state.timeMins-1});\n          this.timerTimeout = setTimeout(this.onUpdateTimer, 1000);\n        } else {\n          this.onTimerFinished();\n        }\n      } else {\n        this.setState({timeSecs: this.state.timeSecs-1});\n        this.timerTimeout = setTimeout(this.onUpdateTimer, 1000);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timerTimeout);\n    this.timerTimeout = null;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro Clock</h1>\n        <div className=\"app-session-break-container\">\n          <AdjustableTimes \n            idLabel=\"break-label\"\n            label=\"Break Length\"\n            idButtonDown=\"break-decrement\"\n            idButtonUp=\"break-increment\"\n            idValue=\"break-length\"\n            value={this.state.breakLength}\n            onDecrement={this.onBreakDecrement}\n            onIncrement={this.onBreakIncrement}\n          />\n          <AdjustableTimes \n            idLabel=\"session-label\"\n            label=\"Session Length\"\n            idButtonDown=\"session-decrement\"\n            idButtonUp=\"session-increment\"\n            idValue=\"session-length\"\n            value={this.state.sessionLength}\n            onDecrement={this.onSessionDecrement}\n            onIncrement={this.onSessionIncrement}\n          />\n        </div>\n        <div className=\"timer-container\">\n          <p className=\"timer-label\" id=\"timer-label\">{this.state.timeLabel}</p>\n          <TimeDisplay timeMins={this.state.timeMins} timeSecs={this.state.timeSecs}/>\n          <div className=\"timer-button-container\">\n            <Button buttonId=\"start_stop\" onClick={this.onStartStopClick} faIconName={this.state.timerIsRunning ? \"fa-pause\" : \"fa-play\"}/>\n            <Button buttonId=\"reset\" onClick={this.onResetClick} faIconName=\"fa-step-backward\"/>\n          </div>\n          {/* // User Story #27: The audio element with id=\"beep\" \n          //must be 1 second or longer. */}\n          <audio id=\"beep\" ref={this.audioBeep} src={process.env.PUBLIC_URL +\"Beep.wav\"} type=\"audio/wav\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}